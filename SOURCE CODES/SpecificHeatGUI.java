/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
//package specificheat;
import java.io.IOException;
import javax.swing.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.BadLocationException;


/**
 *
 * @author Kyle Cancio
 */
public class SpecificHeatGUI extends javax.swing.JFrame {

    public void callinit(){
        initComponents();
    }
        
    private double Cw = 1, Cc = 0.430, Cs = 0.118;
    /**
     * Creates new form SpecificHeatGUI
     */
    public SpecificHeatGUI() {
        initComponents();
        setLocationRelativeTo(null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        mxText = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        mcText = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        msText = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        mwcText = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        mwText = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        mpText = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        mwxText = new javax.swing.JTextField();
        ToText = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        TxText = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        TfText = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        CxText = new javax.swing.JTextField();
        theoCx = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        percentErr = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        compute1 = new javax.swing.JButton();
        compute2 = new javax.swing.JButton();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        compute3 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        selectionItem = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Experiment 4: Specific Heats of Solids");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setName("shFrame"); // NOI18N
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                openMenu(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setText("Experiment 4: Specific Heats of Solids");

        jLabel2.setText("Mass of Specimen(mx) in g: ");

        mxText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mxTextActionPerformed(evt);
            }
        });
        mxText.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                mxTextInputMethodTextChanged(evt);
            }
        });

        jLabel3.setText("Mass of calorimeter(mc) in g:");

        mcText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mcTextActionPerformed(evt);
            }
        });
        mcText.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                mcTextInputMethodTextChanged(evt);
            }
        });

        jLabel4.setText("Mass of Stirrer(ms), in g");

        msText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                msTextActionPerformed(evt);
            }
        });
        msText.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                msTextInputMethodTextChanged(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("g");

        jLabel6.setText("Mass of Water and calorimeter, in g");

        mwcText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mwcTextActionPerformed(evt);
            }
        });
        mwcText.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                mwcTextInputMethodTextChanged(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("g");

        jLabel8.setText("Mass of water (mw), in g");

        mwText.setEditable(false);
        mwText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mwTextActionPerformed(evt);
            }
        });
        mwText.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                mwTextInputMethodTextChanged(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel9.setText("g");

        jLabel10.setText("Mass of Plastic Container(mp), in g");

        mpText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mpTextActionPerformed(evt);
            }
        });
        mpText.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                mpTextInputMethodTextChanged(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel11.setText("g");

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel12.setText("g");

        jLabel13.setText("<html>Mass of Water, plastic Container,<br>stirrer, calorimeter and specimen in g</html>");

        mwxText.setEditable(false);
        mwxText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mwxTextActionPerformed(evt);
            }
        });
        mwxText.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                mwxTextInputMethodTextChanged(evt);
            }
        });

        ToText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ToTextActionPerformed(evt);
            }
        });
        ToText.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                ToTextInputMethodTextChanged(evt);
            }
        });

        jLabel14.setText("<html>Initial Temperature of Cold water,<br>Calorimeter and stirrer (ToText), in &#x2103</html>");

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel15.setText("<html>&#x2103</html>");

        jLabel16.setText("<html>Initial Temperature of Specimen(Tx), in &#x2103</html>");

        TxText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TxTextActionPerformed(evt);
            }
        });
        TxText.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                TxTextInputMethodTextChanged(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel17.setText("<html>&#x2103</html>");

        jLabel18.setText("<html>Equilibrium Temperature (Tf), in &#x2103</html>");

        TfText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TfTextActionPerformed(evt);
            }
        });
        TfText.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                TfTextInputMethodTextChanged(evt);
            }
        });

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel19.setText("<html>&#x2103</html>");

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel20.setText("<html>cal/g-&#x2103</html>");

        jLabel21.setText("<html>Computed Specific heat<br>of Specimen (Cx), in cal/g-&#x2103</html>");

        CxText.setEditable(false);
        CxText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CxTextActionPerformed(evt);
            }
        });
        CxText.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                CxTextInputMethodTextChanged(evt);
            }
        });

        theoCx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                theoCxActionPerformed(evt);
            }
        });
        theoCx.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                theoCxInputMethodTextChanged(evt);
            }
        });

        jLabel22.setText("<html>Theoretical Specific Heat of Specimen, in cal/g-&#x2103</html>");

        jLabel23.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel23.setText("<html>cal/g-&#x2103</html>");

        jLabel24.setText("Percent Error");

        percentErr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                percentErrActionPerformed(evt);
            }
        });
        percentErr.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                percentErrInputMethodTextChanged(evt);
            }
        });

        jLabel25.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel25.setText("%");

        compute1.setText("COMPUTE");
        compute1.setToolTipText("Computes forthe mass of water");
        compute1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compute1ActionPerformed(evt);
            }
        });

        compute2.setText("COMPUTE");
        compute2.setToolTipText("Computes for the mass of Water, plastic Container, stirrer, calorimeter and specimen");
        compute2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compute2ActionPerformed(evt);
            }
        });

        jLabel26.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel26.setText("g");

        jLabel27.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel27.setText("g");

        compute3.setText("COMPUTE");
        compute3.setToolTipText("Computes for Computed Specific heat of Specimen and percent error of the data");
        compute3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compute3ActionPerformed(evt);
            }
        });

        selectionItem.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Copper", "Gold", "Silver", "Iron", "Lead", "Aluminum" }));
        selectionItem.setSelectedItem("");
        selectionItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectionItemActionPerformed(evt);
            }
        });

        jButton1.setText("SET");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("SOLVE ALL");
        jButton2.setToolTipText("Computes all step");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("RESET FIELDS");
        jButton3.setToolTipText("Clears the input fields");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("CLEAR SOLUTION");
        jButton4.setToolTipText("Clears the Solution field");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTextPane1.setEditable(false);
        jTextPane1.setContentType("text");
        jTextPane1.setText("SOLUTION");
        jScrollPane2.setViewportView(jTextPane1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(62, 62, 62))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                                .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel22)
                            .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(mwxText, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel12))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(mwText, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel9)))
                                .addGap(24, 24, 24)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(compute1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(compute2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(theoCx, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel23))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(ToText, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel15))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(msText, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(mwcText, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(mpText, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel11))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(TxText, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel17))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(TfText, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel19))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(CxText, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel20))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(percentErr, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel25)
                                .addGap(18, 18, 18)
                                .addComponent(compute3, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(mxText, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel26)
                                .addGap(32, 32, 32)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(mcText, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel27)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectionItem, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(selectionItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mxText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(mcText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel26)
                            .addComponent(jLabel27))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(msText, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(7, 7, 7)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(mwcText, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(mwText, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)
                            .addComponent(compute1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(mpText, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(mwxText, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel12)
                                .addComponent(compute2))
                            .addComponent(jLabel13))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(jLabel14))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(ToText, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel15)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16)
                            .addComponent(TxText, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel17))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel18)
                            .addComponent(TfText, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel19))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(CxText, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel20))
                            .addComponent(jLabel21))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(theoCx, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel23)
                            .addComponent(jLabel22)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 506, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(percentErr, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel25)
                    .addComponent(compute3)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String spH = null;
        switch(selectionItem.getSelectedItem().toString()){
            case "Copper":
                    spH = "0.093";
                    break;
            case "Gold":
                    spH = "0.031";
                    break;
            case "Silver":
                    spH = "0.057";
                    break;
            case "Iron":
                    spH = "0.108";
                    break;
            case "Lead":
                    spH = "0.031";
                    break;
            case "Aluminum":
                    spH = "0.22";
                    break;          
        }
        theoCx.setText(spH);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void selectionItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectionItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_selectionItemActionPerformed

    private void compute3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compute3ActionPerformed
       try{
           computeCXPE( mcText.getText(),  msText.getText(),  mwText.getText(),  mxText.getText(),  TfText.getText(),  ToText.getText(),  TxText.getText());
           String x = null;
            try {
                x = jTextPane1.getDocument().getText(0, jTextPane1.getDocument().getLength());
            } catch (BadLocationException ex) {
                Logger.getLogger(SpecificHeatGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            jTextPane1.setText(x + "\n---------------------------------------------------------------------------"
                    + "\nTo compute for the Computed Specific Heat of the\nSpecimen (Cx), we will use the formula: \n"
                    + "\nmxcx(Tx - Tf) = [(mccc) + (mscs) + (mwcw)](Tf - To) \n"
                    + "\nSolving for cx:\n Given cc = 0.430 cal/g-C ; cs = 0.118 cal/g-C ; cw = 1 cal/g-C\n"
                    + "\ncx = [[(mccc) + (mscs) + (mwcw)](Tf - To)] / mx(Tx - Tf) \n"
                    + "\ncx = " + "[[" + "(" + mcText.getText() + ")" + "(" + String.valueOf(Cc) + ") +" + "(" + msText.getText() + ")" + "(" + String.valueOf(Cs) + ") +" + "(" + mwText.getText() + ")" + "(" + String.valueOf(Cw) + ")]" + "(" + TfText.getText() + "-" + ToText.getText() + ")]"            
                    + "\ncx = " + CxText.getText() + "cal/g-C");
            if(theoCx.getText().equals("") != true){
               double errorP = 0.0;
               errorP = (double) (Math.abs(Double.parseDouble(theoCx.getText()) - Double.parseDouble(CxText.getText()))/(Double.parseDouble(theoCx.getText())));
               errorP = (double) errorP * 100;
               errorP =  (double) Math.round(errorP*100)/100;
               percentErr.setText(String.valueOf(errorP));
            jTextPane1.setText(x + "\n---------------------------------------------------------------------------"
                    + "\nComputing for the percentage error, given the value of the theoretical specific heat of the specimen: " + theoCx.getText()
                    + "\n\n%Error = [|CxTheo - CxExperimental| / CxTheo] x 100"
                    + "\n\n%Error = [| " + theoCx.getText() + "-" + CxText.getText() + "| / " + theoCx.getText() + ")] x 100"
                    + "\n\n%Error = " + percentErr.getText());
               
            }
            else{
               JOptionPane.showMessageDialog(null, "Theoretical value not set, percent error not computed", "PERCENT ERROR", JOptionPane.INFORMATION_MESSAGE);
       }
       }
       catch(NumberFormatException | NoNegativeValue | NoEqualValues nfe){

       }
       catch(noNegativeMass2 nnm){
            JOptionPane.showMessageDialog(null, "Mass cannot be negative", "Warning", JOptionPane.ERROR_MESSAGE);
        }
       
    }//GEN-LAST:event_compute3ActionPerformed

    private void compute2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compute2ActionPerformed
        try{
            double val = computeMT(mxText.getText(), mwText.getText(), mcText.getText(), msText.getText(), mpText.getText());
            mwxText.setText(String.valueOf(val));
            String x = null;
            try {
                x = jTextPane1.getDocument().getText(0, jTextPane1.getDocument().getLength());
            } catch (BadLocationException ex) {
                Logger.getLogger(SpecificHeatGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            jTextPane1.setText(x + "\n---------------------------------------------------------------------------"
                    + "\nComputing for the mtotal of the materials, we will use: \n"
                    + "\nmtotal = mx + mc + ms + mw + mp \nSubstituting the values: \n"
                    + "\nmtotal = " + "(" + mxText.getText() + ") + " + "(" + mcText.getText() + ") + " + "(" + msText.getText() + ") + " + "(" + mwText.getText() + ") + " + "(" + mpText.getText() + ")"
                    + "\n\nTotal mass of the materials: \n" + mwxText.getText() + "g\n");
        }
        catch(NumberFormatException | NoNegativeValue | NoEqualValues nfe){
        }
        catch(noNegativeMass2 nnm){
            JOptionPane.showMessageDialog(null, "Mass cannot be negative", "Warning", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_compute2ActionPerformed

    private void compute1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compute1ActionPerformed
        try{
            double val = computeMW(mwcText.getText(),mcText.getText());
            mwText.setText(String.valueOf(val));
            String x = null;
            try {
                x =  jTextPane1.getDocument().getText(0, jTextPane1.getDocument().getLength()) ;
            } catch (BadLocationException ex) {
                Logger.getLogger(SpecificHeatGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            jTextPane1.setText( x  + "\n---------------------------------------------------------------------------"
                    + "\nGiven the mass of the calorimeter with water as mwc: \n" 
                    + mwcText.getText() + "g\n\nand the mass of the calorimeter as mc: \n" 
                    +  mcText.getText() 
                    + "g\n\nThe mass of water, mw, can be solved by subtracting the value of mc from mwc.\n\nmwc - mc = mw\n" 
                    + mwcText.getText() + " - " + mcText.getText() + " = " + mwText.getText() + "\n\nMass of Water: \n" + mwText.getText() + "g\n");
            }
        catch(NumberFormatException nfe){
            if(mwcText.getText().equals("") && mcText.getText().equals("")){
                JOptionPane.showMessageDialog(null, "Please input values for mass of calorimeter and calorimeter with water", "Warning", JOptionPane.ERROR_MESSAGE);
            }
            //else if(mwcText.getText().equals("")){
                //    JOptionPane.showMessageDialog(null, "Please input value for mass of calorimeter with water", "Warning", JOptionPane.ERROR_MESSAGE);
                //}
            //else if(mcText.getText().equals("")){
                //    JOptionPane.showMessageDialog(null, "Please input value for mass of empty calorimeter", "Warning", JOptionPane.ERROR_MESSAGE);
                //}
            else{
                JOptionPane.showMessageDialog(null, "Invalid input", "Warning", JOptionPane.ERROR_MESSAGE);
            }
            mwText.setText("0.0");
        }
        catch(NoNegativeValue nnv){
            JOptionPane.showMessageDialog(null, "Mass of the calorimeter cannot be higher than the mass of the calorimeter with water.", "Warning", JOptionPane.ERROR_MESSAGE);
            mwText.setText("0.0");
        }
        catch(NoEqualValues nev){
            JOptionPane.showMessageDialog(null, "Mass of the calorimeter and water must not be equal", "Warning", JOptionPane.ERROR_MESSAGE);
            mwText.setText("0.0");
        }
        catch(noNegativeMass2 nnm){
            JOptionPane.showMessageDialog(null, "Mass cannot be negative", "Warning", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_compute1ActionPerformed

    private void percentErrInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_percentErrInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_percentErrInputMethodTextChanged

    private void percentErrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_percentErrActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_percentErrActionPerformed

    private void theoCxInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_theoCxInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_theoCxInputMethodTextChanged

    private void theoCxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_theoCxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_theoCxActionPerformed

    private void CxTextInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_CxTextInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_CxTextInputMethodTextChanged

    private void CxTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CxTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CxTextActionPerformed

    private void TfTextInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_TfTextInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_TfTextInputMethodTextChanged

    private void TfTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TfTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TfTextActionPerformed

    private void TxTextInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_TxTextInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_TxTextInputMethodTextChanged

    private void TxTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TxTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TxTextActionPerformed

    private void ToTextInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_ToTextInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_ToTextInputMethodTextChanged

    private void ToTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ToTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ToTextActionPerformed

    private void mwxTextInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_mwxTextInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_mwxTextInputMethodTextChanged

    private void mwxTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mwxTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mwxTextActionPerformed

    private void mpTextInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_mpTextInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_mpTextInputMethodTextChanged

    private void mpTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mpTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mpTextActionPerformed

    private void mwTextInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_mwTextInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_mwTextInputMethodTextChanged

    private void mwTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mwTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mwTextActionPerformed

    private void mwcTextInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_mwcTextInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_mwcTextInputMethodTextChanged

    private void mwcTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mwcTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mwcTextActionPerformed

    private void msTextInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_msTextInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_msTextInputMethodTextChanged

    private void msTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_msTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_msTextActionPerformed

    private void mcTextInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_mcTextInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_mcTextInputMethodTextChanged

    private void mcTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mcTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mcTextActionPerformed

    private void mxTextInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_mxTextInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_mxTextInputMethodTextChanged

    private void mxTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mxTextActionPerformed

    }//GEN-LAST:event_mxTextActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try{
            double val = computeMW(mwcText.getText(),mcText.getText());
            mwText.setText(String.valueOf(val));
            String x = null;
            try {
                x =  jTextPane1.getDocument().getText(0, jTextPane1.getDocument().getLength()) ;
            } catch (BadLocationException ex) {
                Logger.getLogger(SpecificHeatGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            jTextPane1.setText( x  + "\n---------------------------------------------------------------------------"
                    + "\nGiven the mass of the calorimeter with water as mwc: \n" 
                    + mwcText.getText() + "g\n\nand the mass of the calorimeter as mc: \n" 
                    +  mcText.getText() 
                    + "g\n\nThe mass of water, mw, can be solved by subtracting the value of mc from mwc.\n\nmwc - mc = mw\n" 
                    + mwcText.getText() + " - " + mcText.getText() + " = " + mwText.getText() + "\n\nMass of Water: \n" + mwText.getText() + "g\n");
            
            mwxText.setText(String.valueOf(computeMT(mxText.getText(), mwText.getText(), mcText.getText(), msText.getText(), mpText.getText())));
            try {
                x = jTextPane1.getDocument().getText(0, jTextPane1.getDocument().getLength());
            } catch (BadLocationException ex) {
                Logger.getLogger(SpecificHeatGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            jTextPane1.setText(x + "\n---------------------------------------------------------------------------"
                    + "\nComputing for the mtotal of the materials, we will use: \n"
                    + "\nmtotal = mx + mc + ms + mw + mp \nSubstituting the values: \n"
                    + "\nmtotal = " + "(" + mxText.getText() + ") + " + "(" + mcText.getText() + ") + " + "(" + msText.getText() + ") + " + "(" + mwText.getText() + ") + " + "(" + mpText.getText() + ")"
                    + "\n\nTotal mass of the materials: \n" + mwxText.getText() + "g\n");
            computeCXPE( mcText.getText(),  msText.getText(),  mwText.getText(),  mxText.getText(),  TfText.getText(),  ToText.getText(),  TxText.getText());
            try {
                x = jTextPane1.getDocument().getText(0, jTextPane1.getDocument().getLength());
            } catch (BadLocationException ex) {
                Logger.getLogger(SpecificHeatGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            jTextPane1.setText(x + "\n---------------------------------------------------------------------------"
                    + "\nTo compute for the Computed Specific Heat of the\nSpecimen (Cx), we will use the formula: \n"
                    + "\nmxcx(Tx - Tf) = [(mccc) + (mscs) + (mwcw)](Tf - To) \n"
                    + "\nSolving for cx:\n Given cc = 0.430 cal/g-C ; cs = 0.118 cal/g-C ; cw = 1 cal/g-C\n"
                    + "\ncx = [[(mccc) + (mscs) + (mwcw)](Tf - To)] / mx(Tx - Tf) \n"
                    + "\ncx = " + "[[" + "(" + mcText.getText() + ")" + "(" + String.valueOf(Cc) + ") +" + "(" + msText.getText() + ")" + "(" + String.valueOf(Cs) + ") +" + "(" + mwText.getText() + ")" + "(" + String.valueOf(Cw) + ")]" + "(" + TfText.getText() + "-" + ToText.getText() + ")]"            
                    + "\ncx = " + CxText.getText() + "cal/g-C");
            if(theoCx.getText().equals("") != true){
               double errorP = 0.0;
               errorP = (double) (Math.abs(Double.parseDouble(theoCx.getText()) - Double.parseDouble(CxText.getText()))/(Double.parseDouble(theoCx.getText())));
               errorP = (double) errorP * 100;
               errorP =  (double) Math.round(errorP*100)/100;
               percentErr.setText(String.valueOf(errorP));
            jTextPane1.setText(x + "\n---------------------------------------------------------------------------"
                    + "\nComputing for the percentage error, given the value of the theoretical specific heat of the specimen: " + theoCx.getText()
                    + "\n\n%Error = [|CxTheo - CxExperimental| / CxTheo] x 100"
                    + "\n\n%Error = [| " + theoCx.getText() + "-" + CxText.getText() + "| / " + theoCx.getText() + ")] x 100"
                    + "\n\n%Error = " + percentErr.getText());

            }
            else{
               JOptionPane.showMessageDialog(null, "Theoretical value not set, percent error not computed", "PERCENT ERROR", JOptionPane.INFORMATION_MESSAGE);
            }
            }
        catch(NumberFormatException nfe){
            if(msText.getText().equals("") || mwcText.getText().equals("") ||  mcText.getText().equals("") || mpText.getText().equals("") || ToText.getText().equals("") || TfText.getText().equals("") || TxText.getText().equals("")){
                JOptionPane.showMessageDialog(null, "Please all required values", "Warning", JOptionPane.ERROR_MESSAGE);
            }
            else{
                JOptionPane.showMessageDialog(null, "Invalid input", "Warning", JOptionPane.ERROR_MESSAGE);
            }
            mwText.setText("0.0");
        }
        catch(NoNegativeValue nnv){
            JOptionPane.showMessageDialog(null, "Mass of the calorimeter cannot be higher than the mass of the calorimeter with water.", "Warning", JOptionPane.ERROR_MESSAGE);
            mwText.setText("0.0");
        }
        catch(NoEqualValues nev){
            JOptionPane.showMessageDialog(null, "Mass of the calorimeter and water must not be equal", "Warning", JOptionPane.ERROR_MESSAGE);
            mwText.setText("0.0");
        }
        catch(noNegativeMass2 nnm){
            JOptionPane.showMessageDialog(null, "Mass cannot be negative", "Warning", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        mxText.setText("");
        mcText.setText("");
        msText.setText("");
        mwText.setText("");
        mwcText.setText("");
        mpText.setText("");
        mwxText.setText("");
        ToText.setText("");
        TxText.setText("");
        TfText.setText("");
        CxText.setText("");
        theoCx.setText("");
        percentErr.setText("");
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        jTextPane1.setText("SOLUTION");
    }//GEN-LAST:event_jButton4ActionPerformed

    private void openMenu(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_openMenu
        new MenuSelector().setVisible(true);
        evt.getWindow().dispose();
    }//GEN-LAST:event_openMenu

    private double computeMW(String mwc, String mc) throws NoNegativeValue, NoEqualValues, noNegativeMass2{
        double retVal = 0.0;
        if(Double.parseDouble(mwc) < 0 || Double.parseDouble(mc) < 0){
            throw new noNegativeMass2();
        }else{
        retVal = (double) Math.round((Double.parseDouble(mwc) - Double.parseDouble(mc))*100)/100;
        if (retVal < 0){
                retVal = 0.0;
                throw new NoNegativeValue();
        }
        else if(retVal == 0){
            retVal = 0.0;
            throw new NoEqualValues();
        }}
        return retVal;
    }
    
    private double computeMT(String mx, String mw, String mc, String ms, String mp) throws NoNegativeValue, NoEqualValues, noNegativeMass2{
        double retVal = 0.0;
        try{
            if(Double.parseDouble(mx) < 0 || Double.parseDouble(mw) < 0 || Double.parseDouble(mc) < 0 || Double.parseDouble(ms) < 0 || Double.parseDouble(mp) < 0){
                throw new noNegativeMass2();
            }else{
            if(mw.equals("") || Double.parseDouble(mw) != computeMW(mwcText.getText(),mc)){
                mw = String.valueOf(computeMW(mwcText.getText(),mc));                
            }
            retVal = (double) Math.round((Double.parseDouble(mx) + Double.parseDouble(mw) + Double.parseDouble(mc) + Double.parseDouble(ms) + Double.parseDouble(mp))*100)/100;
            }
        }
        catch(NumberFormatException nfe){
            if(mx.equals("") || mw.equals("") || mc.equals("") || ms.equals("") || mp.equals("")){
                JOptionPane.showMessageDialog(null, "Please input values for mass of the materials", "Warning", JOptionPane.ERROR_MESSAGE);
                throw new NumberFormatException();
            }
//            else if(mx.equals("")){
//                JOptionPane.showMessageDialog(null, "Please input value for mass of the specimen", "Warning", JOptionPane.ERROR_MESSAGE); 
//            }
//            else if(mw.equals("")){
//                JOptionPane.showMessageDialog(null, "Please input value for mass of water", "Warning", JOptionPane.ERROR_MESSAGE); 
//            }
//            else if(mc.equals("")){
//                JOptionPane.showMessageDialog(null, "Please input value for mass of calorimeter", "Warning", JOptionPane.ERROR_MESSAGE); 
//            }
//            else if(ms.equals("")){
//                JOptionPane.showMessageDialog(null, "Please input value for mass of stirrer", "Warning", JOptionPane.ERROR_MESSAGE); 
//            }
//            else if(mp.equals("")){
//                JOptionPane.showMessageDialog(null, "Please input value for mass of plastic container", "Warning", JOptionPane.ERROR_MESSAGE);
//            }
            else{
                JOptionPane.showMessageDialog(null, "Invalid input", "Warning", JOptionPane.ERROR_MESSAGE);
                throw new NumberFormatException();
            }            
        }
        catch(NoNegativeValue nnv){
            JOptionPane.showMessageDialog(null, "Mass of the calorimeter cannot be higher than the mass of the calorimeter with water", "Warning", JOptionPane.ERROR_MESSAGE);
            throw new NoNegativeValue();
        }
        catch(NoEqualValues nev){
            JOptionPane.showMessageDialog(null, "Mass of the calorimeter and water must not be equal", "Warning", JOptionPane.ERROR_MESSAGE);
            throw new NoEqualValues();
        }
        catch(noNegativeMass2 nnm){
            JOptionPane.showMessageDialog(null, "Mass cannot be negative", "Warning", JOptionPane.ERROR_MESSAGE);
        }
        return retVal;
    }
    
    private void computeCXPE(String mc, String ms, String mw, String mx, String tf, String to, String tx) throws NumberFormatException, NoEqualValues, NoNegativeValue, noNegativeMass2{
        double total;
        double Mc = 0.0, Ms = 0.0, Mw = 0.0, Tf = 0.0, To = 0.0, Tx = 0.0, Mx = 0.0;
        try{
            Mc = Double.parseDouble(mcText.getText());
            Ms = Double.parseDouble(msText.getText());
            if(mw.equals("")|| Double.parseDouble(mw) != computeMW(mwcText.getText(),mc)){
                mw = String.valueOf(computeMW(mwcText.getText(),mc));
                Mw = Double.parseDouble(mw);
            }
            else{
                Mw = Double.parseDouble(mw);
            }

            Tf = Double.parseDouble(TfText.getText());
            To = Double.parseDouble(ToText.getText());
            Mx = Double.parseDouble(mxText.getText());
            Tx = Double.parseDouble(TxText.getText());
            
            if(Mc < 0 || Ms < 0 || Mw < 0 || Mx < 0){
                throw new noNegativeMass2();
            }else{
            total = (double) Math.round(((((Mc*Cc) + (Ms*Cs) + (Mw*Cw)) * (Tf - To)) / (Mx*(Tx-Tf)))*1000)/1000;
            CxText.setText(String.valueOf(total));
            }
        }
        catch(NumberFormatException nfe){
            if(mc.equals("") || ms.equals("") || mw.equals("") || mx.equals("") || tf.equals("") || to.equals("") || tx.equals("")){
                JOptionPane.showMessageDialog(null, "Please input all the values required", "Warning", JOptionPane.ERROR_MESSAGE);
                throw new NumberFormatException();
            }
            else{
                JOptionPane.showMessageDialog(null, "Invalid input", "Warning", JOptionPane.ERROR_MESSAGE);
                throw new NumberFormatException();
            }
        }
        catch(NoNegativeValue nnv){
            JOptionPane.showMessageDialog(null, "Mass of the calorimeter cannot be higher than the mass of the calorimeter with water", "Warning", JOptionPane.ERROR_MESSAGE);
            throw new NoNegativeValue();
        }
        catch(NoEqualValues nev){
            JOptionPane.showMessageDialog(null, "Mass of the calorimeter and water must not be equal", "Warning", JOptionPane.ERROR_MESSAGE);
            throw new NoEqualValues();
        }
        catch(noNegativeMass2 nnm){
            JOptionPane.showMessageDialog(null, "Mass cannot be negative", "Warning", JOptionPane.ERROR_MESSAGE);
        }
    }  
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SpecificHeatGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SpecificHeatGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SpecificHeatGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SpecificHeatGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SpecificHeatGUI().setVisible(true);

                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField CxText;
    private javax.swing.JTextField TfText;
    private javax.swing.JTextField ToText;
    private javax.swing.JTextField TxText;
    private javax.swing.JButton compute1;
    private javax.swing.JButton compute2;
    private javax.swing.JButton compute3;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextField mcText;
    private javax.swing.JTextField mpText;
    private javax.swing.JTextField msText;
    private javax.swing.JTextField mwText;
    private javax.swing.JTextField mwcText;
    private javax.swing.JTextField mwxText;
    private javax.swing.JTextField mxText;
    private javax.swing.JTextField percentErr;
    private javax.swing.JComboBox selectionItem;
    private javax.swing.JTextField theoCx;
    // End of variables declaration//GEN-END:variables
}

class NoNegativeValue extends Exception{}

class NoEqualValues extends Exception{}

/*
private double computeMWC(String d1, String d2) throws NoNegativeValue{
        double retVal = 0.0;
        try{
            retVal = (double) Math.round((Double.parseDouble(d2) - Double.parseDouble(d1))*100)/100;
            if (retVal < 0){
                retVal = 0.0;
                throw new NoNegativeValue();
            }
        }
        catch(NumberFormatException nfe){
            if(d1.equals("") || d2.equals("")){
                JOptionPane.showMessageDialog(null, "Please input required values.", "Warning", JOptionPane.ERROR_MESSAGE); 
            }
            else{
                JOptionPane.showMessageDialog(null, "Invalid character input", "Warning", JOptionPane.ERROR_MESSAGE); 
            }
        }
        return retVal;
    }
    
    private double computeMTotal(String d1, String d2,String d3, String d4, String d5) throws NoNegativeValue{
        double retVal = 0.0;
        try{
            if(mwText.getText().equals("")){
                String dx = mwcText.getText();
                d2 = String.valueOf(computeMWC(d5,dx));
                if(computeMWC(d5,dx) < 0){
                    throw new NoNegativeValue();
                }
            }
        retVal = (double) Math.round((Double.parseDouble(d1) + Double.parseDouble(d2) + Double.parseDouble(d3) + Double.parseDouble(d4) + Double.parseDouble(d5))*100)/100;
        }
        catch(NumberFormatException nfe){
            JOptionPane.showMessageDialog(null, "Invalid character input", "Warning", JOptionPane.ERROR_MESSAGE); 
        }
        
        return retVal;
    }
 */
class noNegativeMass2 extends Exception{}